generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id                      Int           @id @default(autoincrement())
  username                String        @unique
  email                   String        @unique
  password_digest         String
  role                    Role          @default(user)
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  picture                 String?
  bio                     String?       @default("This user has no bio")
  handle                  String        @unique
  status                  UserStatus    @default(ACTIVE)
  deactivatedAt           DateTime?
  deactivated             Boolean       @default(false)
  socials                 Json?         @default("[]")
  preferences             Json?         @default("{\"cookies\": true, \"analytics\": false, \"email_notifications\": false, \"newsletter_subscription\": false}")
  branding                String?       @default("#01142d")
  skills                  String?       @default("Just surfing the web")
  email_verified          Boolean       @default(false)
  auth_provider           AuthProvider  @default(email)
  keep_blogs_on_delete    Boolean       @default(false)
  keep_comments_on_delete Boolean       @default(false)
  blogs                   Blog[]
  comments                Comment[]
  favorites               Favorite[]
  responses               Response[]
  BlogVersion             BlogVersion[]

  @@index([handle, email, username])
}

model Blog {
  id            Int           @id @default(autoincrement())
  title         String?
  authorId      Int
  tags          String?
  body          String?
  slug          String?
  description   String?
  reading_time  Int           @default(0)
  path          String?       @unique
  status        BlogStatus    @default(PUBLISHED)
  likes         Int           @default(0)
  views         Int           @default(0)
  audio         String?
  image         Json?         @default("{}")
  uuid          String        @unique @default(uuid()) @db.Uuid
  author        User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments      Comment[]
  show_comments Boolean       @default(true)
  Favorite      Favorite[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  versions      BlogVersion[]

  @@index([slug, path, authorId, uuid])
}

model BlogVersion {
  id        String   @unique @default(uuid()) @db.Uuid
  blogId    Int
  editorId  Int // or relation to User if you want
  role      String   @default("author")
  note      String? // e.g., "Fixed typos"
  createdAt DateTime @default(now())
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  editor    User     @relation(fields: [editorId], references: [id], onDelete: Cascade)

  @@index([blogId, id])
}

model Comment {
  id        Int           @id @default(autoincrement())
  authorId  Int
  blogId    Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  body      String
  status    CommentStatus @default(VISIBLE)
  show      Boolean       @default(true)
  author    User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  blog      Blog          @relation(fields: [blogId], references: [id], onDelete: Cascade)
  responses Response[]

  @@index([blogId, authorId])
}

model Response {
  id        Int           @id @default(autoincrement())
  body      String
  authorId  Int
  commentId Int
  status    CommentStatus @default(VISIBLE)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  author    User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comment   Comment       @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([commentId, authorId])
}

model Favorite {
  id     Int  @id @default(autoincrement())
  userId Int
  blogId Int
  blog   Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, blogId])
  @@index([userId, blogId])
}

enum Role {
  user
  admin
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  DEACTIVATED
  INACTIVE
  DELETED
}

enum BlogStatus {
  PUBLISHED
  UNPUBLISHED
  ARCHIVED
  DRAFT
}

enum CommentStatus {
  VISIBLE
  FLAGGED
  HIDDEN
  ARCHIVED
}

enum AuthProvider {
  email
  google
  github
  meta
}
