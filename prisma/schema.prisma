// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  user
  admin
}

model User {
  id              Int           @id @default(autoincrement())
  username        String        @unique
  email           String        @unique
  password_digest String
  role            Role          @default(user)
  status          String
  deleted         Boolean       @default(false)
  favorites       Json          @default("[]")
  blogs           Blog[]
  comments        Comment[]
  socialMedia     SocialMedia[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Blog {
  id        Int       @id @default(autoincrement())
  title     String    @unique
  content   String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  status    String
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    Int
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SocialMedia {
  id        Int      @id @default(autoincrement())
  platform  String
  handle    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, platform])
}
