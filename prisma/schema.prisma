// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  user
  admin
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DEACTIVATED
}

enum BlogStatus {
  PUBLISHED
  UNPUBLISHED
  ARCHIVED
}

enum CommentStatus {
  VISIBLE
  FLAGGED
  HIDDEN
}

model User {
  id              Int        @id @default(autoincrement())
  username        String     @unique
  email           String     @unique
  password_digest String
  role            Role       @default(user)
  bio             String?    @default("This user has no bio")
  status          UserStatus @default(ACTIVE)
  picture         String?
  handle          String     @unique
  deleted         Boolean    @default(false)
  favorites       Json?
  blogs           Blog[]
  comments        Comment[]
  socials         Json?      @default("[]")
  deactivatedAt   DateTime?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@index(fields: [handle, email])
}

model Blog {
  id        Int        @id @default(autoincrement())
  title     String
  body      String
  slug      String     @unique
  image     String?
  tags      String?
  author    User       @relation(fields: [authorId], references: [id])
  authorId  Int
  status    BlogStatus @default(PUBLISHED)
  comments  Comment[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([slug, authorId])
}

model Comment {
  id        Int           @id @default(autoincrement())
  body      String
  author    User          @relation(fields: [authorId], references: [id])
  authorId  Int
  blog      Blog          @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    Int
  status    CommentStatus @default(VISIBLE)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([blogId, authorId])
}
